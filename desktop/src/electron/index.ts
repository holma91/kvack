import { app, BrowserWindow, BrowserView, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string; // http://localhost:3000/main_window
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // /Users/lapuerta/dev/kvack/desktop/.webpack/renderer/main_window/preload.js

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createView = (mainWindow: any, domain: string): void => {
  const view = new BrowserView();
  mainWindow.setBrowserView(view);
  view.setBounds({ x: 0, y: 400, width: 1000, height: 400 });
  view.webContents.loadURL(domain);
};

const createWindow = (): void => {
  console.log(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);
  console.log(MAIN_WINDOW_WEBPACK_ENTRY);
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.webContents.openDevTools();

  const sites: { [key: string]: any } = {
    google: () => createView(mainWindow, 'https://google.com'),
    stackoverflow: () => createView(mainWindow, 'https://stackoverflow.com'),
    reddit: () => createView(mainWindow, 'https://reddit.com'),
    wolframalpha: () => createView(mainWindow, 'https://wolframalpha.com'),
  };

  ipcMain.on('change-site', (event: any, site: string) => {
    sites[site]();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
